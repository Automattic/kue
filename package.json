{
  "name": "kue",
  "version": "0.4.0",
  "description": "Feature rich priority job queue backed by redis",
  "keywords": [
    "job",
    "queue",
    "worker",
    "redis"
  ],
  "author": {
    "name": "TJ Holowaychuk",
    "email": "tj@learnboost.com"
  },
  "dependencies": {
    "redis": "0.7.2",
    "express": "2.5.11",
    "jade": "0.26.3",
    "stylus": "0.27.2",
    "nib": "0.5.0",
    "reds": "0.1.4"
  },
  "main": "index",
  "readme": "# Kue\n\n  Kue is a priority job queue backed by [redis](http://redis.io), built for [node.js](http://nodejs.org).\n\n## Installation\n\n    $ npm install kue\n\n## Features\n\n  - delayed jobs\n  - job event and progress pubsub\n  - rich integrated UI\n  - infinite scrolling\n  - UI progress indication\n  - job specific logging\n  - powered by Redis\n  - optional retries\n  - full-text search capabilities\n  - RESTful JSON API\n\n## Creating Jobs\n\n First create a job `Queue` with `kue.createQueue()`:\n\n```js\nvar kue = require('kue')\n  , jobs = kue.createQueue();\n```\n\n  Calling `jobs.create()` with the type of job (\"email\"), and arbitrary job data will return a `Job`, which can then be `save()`ed, adding it to redis, with a default priority level of \"normal\". The `save()` method optionally accepts a callback, responding with an `error` if something goes wrong. The `title` key is special-cased, and will display in the job listings within the UI, making it easier to find a specific job.\n\n```js\njobs.create('email', {\n    title: 'welcome email for tj'\n  , to: 'tj@learnboost.com'\n  , template: 'welcome-email'\n}).save();\n```\n\n### Job Priority\n\n To specify the priority of a job, simply invoke the `priority()` method with a number, or priority name, which is mapped to a number.\n\n```js\njobs.create('email', {\n    title: 'welcome email for tj'\n  , to: 'tj@learnboost.com'\n  , template: 'welcome-email'\n}).priority('high').save();\n```\n\n  The default priority map is as follows:\n\n```js\n{\n    low: 10\n  , normal: 0\n  , medium: -5\n  , high: -10\n  , critical: -15\n};\n```\n\n### Failure Attempts\n\n By default jobs only have _one_ attempt, that is when they fail, they are marked as a failure, and remain that way until you intervene. However, Kue allows you to specify this, which is important for jobs such as transferring an email, which upon failure, may usually retry without issue. To do this invoke the `.attempts()` method with a number.\n\n ```js\n jobs.create('email', {\n     title: 'welcome email for tj'\n   , to: 'tj@learnboost.com'\n   , template: 'welcome-email'\n }).priority('high').attempts(5).save();\n```\n\n### Job Logs\n\n Job-specific logs enable you to expose information to the UI at any point in the job's life-time. To do so simply invoke `job.log()`, which accepts a message string as well as variable-arguments for sprintf-like support:\n\n```js \njob.log('$%d sent to %s', amount, user.name);\n``` \n\n### Job Progress\n\n Job progress is extremely useful for long-running jobs such as video conversion. To update the job's progress simply invoke `job.progress(completed, total)`:\n\n```js\njob.progress(frames, totalFrames);\n```\n\n### Job Events\n\n Job-specific events are fired on the `Job` instances via Redis pubsub. The following events are currently supported:\n\n    - `failed` the job has failed\n    - `complete` the job has completed\n    - `promotion` the job (when delayed) is now queued\n    - `progress` the job's progress ranging from 0-100\n\n For example this may look something like the following:\n\n```js\nvar job = jobs.create('video conversion', {\n    title: 'converting loki\\'s to avi'\n  , user: 1\n  , frames: 200\n});\n\njob.on('complete', function(){\n  console.log(\"Job complete\");\n}).on('failed', function(){\n  console.log(\"Job failed\");\n}).on('progress', function(progress){\n  process.stdout.write('\\r  job #' + job.id + ' ' + progress + '% complete');\n});\n```\n\n### Queue Events\n\n Queue-level events are currently provide access to the job-level events previously mentioned, however scoped to the `Queue` instance to to apply logic at a \"global\" level. An example of this is removing completed jobs:\n \n```js\njobs.on('job complete', function(id){\n  Job.get(id, function(err, job){\n    if (err) return;\n    job.remove(function(err){\n      if (err) throw err;\n      console.log('removed completed job #%d', job.id);\n    });\n  });\n});\n```\n\n The events available are the same as mentioned in \"Job Events\", however prefixed with \"job \". \n\n### Delayed Jobs\n\n  Delayed jobs may be scheduled to be queued for an arbitrary distance in time by invoking the `.delay(ms)` method, passing the number of milliseconds relative to _now_. This automatically flags the `Job` as \"delayed\". \n\n```js\nvar email = jobs.create('email', {\n    title: 'Account renewal required'\n  , to: 'tj@learnboost.com'\n  , template: 'renewal-email'\n}).delay(minute)\n  .priority('high')\n  .save();\n```\n\nWhen using delayed jobs, we must also check the delayed jobs with a timer, promoting them if the scheduled delay has been exceeded. This `setInterval` is defined within `Queue#promote(ms)`, defaulting to a check every 5 seconds.\n\n```js\njobs.promote();\n```\n\n## Processing Jobs\n\n Processing jobs is simple with Kue. First create a `Queue` instance much like we do for creating jobs, providing us access to redis etc, then invoke `jobs.process()` with the associated type.\n\n In the following example we pass the callback `done` to `email`, if this function responds with an error it will be displayed in the UI and the job will be marked as a failure.\n\n```js\nvar kue = require('kue')\n , jobs = kue.createQueue();\n\njobs.process('email', function(job, done){\n  email(job.data.to, done);\n});\n```\n\n### Processing Concurrency\n\n By default a call to `jobs.process()` will only accept one job at a time for processing. For small tasks like sending emails this is not ideal, so we may specify the maximum active jobs for this type by passing a number:\n \n```js\njobs.process('email', 20, function(job, done){\n  // ...\n});\n```\n\n### Updating Progress\n\n For a \"real\" example, let's say we need to compile a PDF from numerous slides with [node-canvas](http://github.com/learnboost/node-canvas). Our job may consist of the following data, note that in general you should _not_ store large data in the job it-self, it's better to store references like ids, pulling them in while processing.\n \n```js\njobs.create('slideshow pdf', {\n    title: user.name + \"'s slideshow\"\n  , slides: [...] // keys to data stored in redis, mongodb, or some other store\n});\n```\n\n  We can access this same arbitrary data within a separate process while processing, via the `job.data` property. In the example we render each slide one-by-one, updating the job's log and process. When an error occurs we invoke `done(err)` to tell Kue something happened, otherwise we invoke `done()` only when the job is complete.\n\n```js\njobs.process('slideshow pdf', 5, function(job, done){\n  var slides = job.data.slides\n    , len = slides.length;\n\n  function next(i) {\n    var slide = slides[i]; // pretend we did a query on this slide id ;)\n    job.log('rendering %dx%d slide', slide.width, slide.height);\n    renderSlide(slide, function(err){\n      if (err) return done(err);\n      job.progress(i, len);\n      if (i == len) done()\n      else next(i + 1);\n    });\n  }\n\n  next(0);\n});\n```\n\n## Redis Connection Settings\n\n  By default, Kue will connect to Redis using the client default settings (port defaults to `6389`, host defaults to `127.0.0.1`).  Redis client connection settings can be set by overriding the `kue.redis.createClient` function.\n\n  For example, to create a Redis client that connects to `192.168.1.2` on port `1234` that requires authentication, use the following:\n\n  ```javascript\n  var kue = require('kue')\n    , redis = require('redis');\n  \n  kue.redis.createClient = function() {\n    var client = redis.createClient(1234, '192.168.1.2');\n    client.auth('password');\n    return client;\n  };\n  ```\n\n  Redis connection settings must be set before calling `kue.createQueue()` or accessing `kue.app`.\n\n## User-Interface\n\n The UI is a small [Express](http://github.com/visionmedia/express) application, to fire it up simply run the following, altering the port etc as desired.\n\n```js\nvar kue = require('kue');\nkue.app.listen(3000);\n```\n\nThe title defaults to \"Kue\", to alter this invoke:\n\n```js\nkue.app.set('title', 'My Application');\n```\n\n## JSON API\n\n  Along with the UI Kue also exposes a JSON API, which is utilized by the UI.\n\n### GET /job/search?q=\n\n  Query jobs, for example \"GET /job/search?q=avi video\":\n\n```js\n[\"5\", \"7\", \"10\"]\n```\n\n### GET /stats\n\n  Currently responds with state counts, and worker activity time in milliseconds:\n\n```js\n{\"inactiveCount\":4,\"completeCount\":69,\"activeCount\":2,\"failedCount\":0,\"workTime\":20892}\n```\n\n### GET /job/:id\n\n  Get a job by `:id`:\n\n```js\n{\"id\":\"3\",\"type\":\"email\",\"data\":{\"title\":\"welcome email for tj\",\"to\":\"tj@learnboost.com\",\"template\":\"welcome-email\"},\"priority\":-10,\"progress\":\"100\",\"state\":\"complete\",\"attempts\":null,\"created_at\":\"1309973155248\",\"updated_at\":\"1309973155248\",\"duration\":\"15002\"}\n```\n\n### GET /job/:id/log\n\n  Get job `:id`'s log:\n  \n```js\n['foo', 'bar', 'baz']\n```\n\n### GET /jobs/:from..:to/:order?\n\n  Get jobs with the specified range `:from` to `:to`, for\n  example \"/jobs/0..2\", where `:order` may be \"asc\" or \"desc\":\n\n```js\n[{\"id\":\"12\",\"type\":\"email\",\"data\":{\"title\":\"welcome email for tj\",\"to\":\"tj@learnboost.com\",\"template\":\"welcome-email\"},\"priority\":-10,\"progress\":0,\"state\":\"active\",\"attempts\":null,\"created_at\":\"1309973299293\",\"updated_at\":\"1309973299293\"},{\"id\":\"130\",\"type\":\"email\",\"data\":{\"title\":\"welcome email for tj\",\"to\":\"tj@learnboost.com\",\"template\":\"welcome-email\"},\"priority\":-10,\"progress\":0,\"state\":\"active\",\"attempts\":null,\"created_at\":\"1309975157291\",\"updated_at\":\"1309975157291\"}]\n```\n\n### GET /jobs/:state/:from..:to/:order?\n\n  Same as above, restricting by `:state` which is one of:\n  \n    - active\n    - inactive\n    - failed\n    - complete\n\n### GET /jobs/:type/:state/:from..:to/:order?\n\n  Same as above, however restricted to `:type` and `:state`.\n\n### DELETE /job/:id\n\n  Delete job `:id`:\n  \n    $ curl -X DELETE http://local:3000/job/2\n    {\"message\":\"job 2 removed\"}\n\n## Parallel Processing With Cluster\n\n The example below shows how you may use [Cluster](http://learnboost.github.com/cluster) to spread the job processing load across CPUs. By default cluster will create one worker per CPU, however you can specify this number via `.set('workers', N)`.\n \n When cluster `.isMaster` the file is being executed in context of the master process, in which case you may perform tasks that you only want once, such as starting the web app bundled with Kue. The logic in the `else` block is executed _per worker_. \n\n```js\nvar kue = require('kue')\n  , cluster = require('cluster')\n  , jobs = kue.createQueue();\n\ncluster = cluster()\n  .set('workers', 8)\n  .use(cluster.debug())\n  .start();\n\nif (cluster.isMaster) {\n  kue.app.listen(3000);\n} else {\n  jobs.process('email', function(job, done){\n    var pending = 5\n      , total = pending;\n\n    setInterval(function(){\n      job.log('sending!');\n      job.progress(total - pending, total);\n      --pending || done();\n    }, 1000);\n  });\n}\n```\n\nrunning this example you'll see the following output:\n\n    $ node kue-example\n    info - master started\n    info - worker 0 spawned\n    info - worker 1 spawned\n    info - worker 2 spawned\n    info - listening for connections\n    info - worker 2 connected\n    info - worker 1 connected\n    info - worker 0 connected\n\nnow when you visit Kue's UI in the browser you'll see that jobs are being processed roughly 8 times faster! (if you have 8 cores).\n\n## Securing Kue\n\n Through the use of app mounting you may customize the web application, enabling TLS, or adding additional middleware like Connect's `basicAuth()`.\n\n```js\nvar app = express.createServer({ ... tls options ... });\napp.use(express.basicAuth('foo', 'bar'));\napp.use(kue.app);\napp.listen(3000);\n```\n\n## Screencasts\n\n  - [Introduction](http://www.screenr.com/oyNs) to Kue\n  - API [walkthrough](http://nodetuts.com/tutorials/27-kue-jobs.html#video) to Kue\n\n## License \n\n(The MIT License)\n\nCopyright (c) 2011 LearnBoost &lt;tj@learnboost.com&gt;\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n",
  "_id": "kue@0.4.0",
  "dist": {
    "shasum": "d8aa1a27e868f72a70e3c71c5e1a78f09d3376c4"
  },
  "_from": "kue@git://github.com/Reregistered/kue.git"
}
